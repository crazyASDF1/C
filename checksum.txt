LAB ASSIGNMENT - 4

1. Error detection mechanism that involves binary addition to compute the code word at the receiver end.
Checksum

Code:

#include <bits/stdc++.h>
using namespace std;
 

string Ones_complement(string data)
{
    for (int i = 0; i < data.length(); i++) {
        if (data[i] == '0')
            data[i] = '1';
        else
            data[i] = '0';
    }
 
    return data;
}
 

string checkSum(string data, int block_size)
{
    
    int n = data.length();
    if (n % block_size != 0) {
        int pad_size = block_size - (n % block_size);
        for (int i = 0; i < pad_size; i++) {
            data = '0' + data;
        }
    }
 
    string result = "";
 
    for (int i = 0; i < block_size; i++) {
        result += data[i];
    }
 
    for (int i = block_size; i < n; i += block_size) {
 
        string next_block = "";
 
        for (int j = i; j < i + block_size; j++) {
            next_block += data[j];
        }
 
        string additions = "";
        int sum = 0, carry = 0;
 
        
        for (int k = block_size - 1; k >= 0; k--) {
            sum += (next_block[k] - '0')
                   + (result[k] - '0');
            carry = sum / 2;
            if (sum == 0) {
                additions = '0' + additions;
                sum = carry;
            }
            else if (sum == 1) {
                additions = '1' + additions;
                sum = carry;
            }
            else if (sum == 2) {
                additions = '0' + additions;
                sum = carry;
            }
            else {
                additions = '1' + additions;
                sum = carry;
            }
        }
 
        string final = "";
 
        if (carry == 1) {
            for (int l = additions.length() - 1; l >= 0;
                 l--) {
                if (carry == 0) {
                    final = additions[l] + final;
                }
                else if (((additions[l] - '0') + carry) % 2
                         == 0) {
                    final = "0" + final;
                    carry = 1;
                }
                else {
                    final = "1" + final;
                    carry = 0;
                }
            }
 
            result = final;
        }
        else {
            result = additions;
        }
    }
 
    return Ones_complement(result);
}
 
bool checker(string sent_message,
             string rec_message,
             int block_size)
{
 
    string sender_checksum
        = checkSum(sent_message, block_size);
 
    string receiver_checksum = checkSum(
        rec_message + sender_checksum, block_size);
 
    if (count(receiver_checksum.begin(),
              receiver_checksum.end(), '0')
        == block_size) {
        return true;
    }
    else {
        return false;
    }
}
 
int main()
{
    string sent_message
        = "10000101011000111001010011101101";
    string recv_message
        = "10000101011000111001010011101101";
    int block_size = 8;
 
    if (checker(sent_message,
                recv_message,
                block_size)) {
        cout << "No Error";
    }
    else {
        cout << "Error";
    }
 
    return 0;
}

Output:

2. CRC
Code:
#include<stdio.h>  
#include<string.h>  
 
#define N strlen(gen_poly)  
char data[28];  
char check_value[28];  
char gen_poly[10];  
int data_length,i,j;  
void XOR(){  
    for(j = 1;j < N; j++)  
    check_value[j] = (( check_value[j] == gen_poly[j])?'0':'1');  
      
}  

  
void crc(){  
    for(i=0;i<N;i++)  
        check_value[i]=data[i];  
    do{  
        if(check_value[0]=='1')  
            XOR();  
        for(j=0;j<N-1;j++)  
            check_value[j]=check_value[j+1];  
        check_value[j]=data[i++];  
    }while(i<=data_length+N-1);  
}  

void receiver(){  
    printf("\nEnter the received data: ");  
    scanf("%s", data);  
    printf("\n");  
    printf("Data received: %s", data);
    printf("\n");
    crc();  
    for(i=0;(i<N-1) && (check_value[i]!='1');i++);  
        if(i<N-1)  
            printf("\nError detected\n\n");  
        else  
            printf("\nNo error detected\n\n");  
}  


int main()  
{  
    printf("\nEnter data to be transmitted: ");  
    scanf("%s",data);  
    printf("\n Enter the Generating polynomial: ");  
    scanf("%s",gen_poly);  
    data_length=strlen(data);  
    for(i=data_length;i<data_length+N-1;i++)  
        data[i]='0';  
    
    printf("\n Data padded with n-1 zeros : %s",data);
    printf("\n");  
    
    crc();  
    printf("\nCRC or Check value is : %s",check_value);  
    for(i=data_length;i<data_length+N-1;i++)  
        data[i]=check_value[i-data_length];  
    printf("\n Final data to be sent : %s",data);  
    receiver();  
        return 0;  
}  
Output:


