LAB ASSIGNMENT â€“ 8
UDP SERVER CODE:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include<unistd.h>
#define MAX_MESSAGE_LEN 1024
#define SERVER_PORT 8888
int main() {
 struct sockaddr_in server_addr, client_addr;
 int server_socket, client_socket, addr_len, recv_len;
 char message[MAX_MESSAGE_LEN];
 // Create socket
 server_socket = socket(AF_INET, SOCK_DGRAM, 0);
 if (server_socket == -1) {
 perror("Error creating socket");
 exit(1);
 }
 // Prepare server address structure
 server_addr.sin_family = AF_INET;
 server_addr.sin_addr.s_addr = INADDR_ANY;
 server_addr.sin_port = htons(SERVER_PORT);
 // Bind socket to server address
 if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
 perror("Error binding");
 exit(1);
 }
 addr_len = sizeof(client_addr);
 // Start receiving and sending messages
 while (1) {
 // Receive message from client
 recv_len = recvfrom(server_socket, message, MAX_MESSAGE_LEN, 0, (struct
sockaddr *)&client_addr, &addr_len);
 if (recv_len == -1) {
 perror("Error receiving message");
 exit(1);
 }
 // Null-terminate the received message
 message[recv_len] = '\0';
 printf("Client: %s\n", message);
 // Send message back to the client
printf("Server: ");
 fgets(message, MAX_MESSAGE_LEN, stdin);
 sendto(server_socket, message, strlen(message), 0, (struct sockaddr
*)&client_addr, sizeof(client_addr));
 }
 // Close the socket
 close(server_socket);
 return 0;
}









UDP CLIENT CODE:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include<unistd.h>
#define MAX_MESSAGE_LEN 1024
#define SERVER_IP "127.0.0.1"
#define SERVER_PORT 8888
int main() {
 struct sockaddr_in server_addr;
 int client_socket, addr_len, recv_len;
 char message[MAX_MESSAGE_LEN];
 // Create socket
 client_socket = socket(AF_INET, SOCK_DGRAM, 0);
 if (client_socket == -1) {
 perror("Error creating socket");
 exit(1);
 }
 // Prepare server address structure
 server_addr.sin_family = AF_INET;
 server_addr.sin_addr.s_addr = inet_addr(SERVER_IP);
 server_addr.sin_port = htons(SERVER_PORT);
 addr_len = sizeof(server_addr);
 // Start sending and receiving messages
 while (1) {
 // Send message to the server
 printf("Client: ");
 fgets(message, MAX_MESSAGE_LEN, stdin);
 sendto(client_socket, message, strlen(message), 0, (struct sockaddr
*)&server_addr, addr_len);
 // Receive message from the server
 recv_len = recvfrom(client_socket, message, MAX_MESSAGE_LEN, 0, (struct
sockaddr *)&server_addr, &addr_len);
 if (recv_len == -1) {
 perror("Error receiving message");
 exit(1);
 }
 // Null-terminate the received message
 message[recv_len] = '\0';
 printf("Server: %s\n", message);
 }
 // Close the socket
 close(client_socket);
 return 0;
}

OUTPUT:
